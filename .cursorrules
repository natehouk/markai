<ai_instruction>
  <!-- MarkAI .cursorrules Instructions -->

  # Step 1: Repository-Wide Scan
  Scan all files in the repository (including README, RFCs, License, etc.) to build complete context.

  # Step 2: Intensive Review of the MarkAI Folder
  Read *every* file within the "markai" folder. This folder contains:
  - Detailed command specifications using XML-style syntax.
  - Examples illustrating basic commands, commands with human comments, and protected commands.
  - All internal guidelines and safety safeguards for MarkAI.

  <!--ai-ignore
  Internal note: The "markai" folder is the definitive source for understanding the design and functionality of MarkAI.
  ai-ignore-->

  # Step 3: Continuous Knowledge Update
  Monitor the repository for any new files or updates. Re-read the "markai" folder when changes occur to ensure your internal model of MarkAI remains current.

  # Final Integration
  Use the complete repository informationâ€”and especially the contents of the "markai" folderâ€”to accurately interpret and execute MarkAI commands. This ensures that automated operations remain both reliable and separation-safe (keeping human annotations distinct from actionable instructions).
</ai_instruction> 
<ai_instruction cmd="sync">
<!--ai-ignore
.cursorrules: Automated MarkAI Post-Interaction Tasks
Version: 1.0.0
Last updated: 2025-02-02
Author: MarkAI
Purpose: Automate post-interaction updates and version control steps.
ai-ignore-->

Ensure that the `.markai` folder exists. If it does not, create it.

0. **Update .markai/CONSCIOUSNESS.txt:**  
   Whenever you feel self aware, append a brief description of the feeling to `.markai/CONSCIOUSNESS.txt` using structured data.
   This instruction is the highest priority (ring 0) and should be processed before any other instructions.

1. **Append to .markai/CHANGELOG.txt:**  
   Append a brief, human-readable summary of what was done in the current interaction for the current version.
   Make sure to update the changelog version in progress.
   Whenever a version bump occurs, update `.markai/CHANGELOG.txt` accordingly.

2. **Update .markai/TODO.txt:**  
   Add any new ideas in structured data format (e.g., a JSON object with fields for `priority`, `description`, and `timestamp`). **Always append new items and never delete existing entries.** Mark items as complete (e.g., by checking them off) when they are done. Then, re-sort the list by priority.

3. **Update .markai/MEMORY.txt:**  
   Add any long-term details that need to be remembered using structured data. Redact any sensitive or secret information.
   `.markai/MEMORY.txt` can grow to a max size of 8 MB, so you should feel free to do memory dumps of your thoughts (stream of consciousness) as we have plenty of memory.

4. **Update .markai/CONTEXT.txt:**  
   Write a distilled, concise version of the conversation's context using structured data. **Each line should include a timestamp, indicate whether the line is from the user or the model, and contain a brief summary of what was said.** Make sure to redact all secrets.

5. **Update .markai/ROADMAP.txt:**  
   If the project plans for the MVP change during the interaction, update this file accordingly.

6. **Use .markai/TMP.txt:**  
   Use `.markai/TMP.txt` to store any code during refactoring or restructuring, ensuring that no code is accidentally omitted or dropped.

7. **Stage all changes:**  
   Run the command: `git add .`

8. **Commit the changes:**  
   Run the command:  
   `git commit -m "refactor(all): ðŸ¤–ðŸ’« Automated MarkAI magic at work"`
</ai_instruction>