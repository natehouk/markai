Request for Comments: MARKAI-0002
Category: Standards Track
Published: February 2025

           Enhancements to AI Instruction Processing: Auto-Synchronization and Prompt Controls

Status of this Memo:
This memorandum outlines enhancements to the AI instruction processing system. Distribution of this memo is unrestricted.

Abstract:
This document details the enhancements to the AI instruction processing system, including the integration of an automatic synchronization feature and the refinement of user prompt controls. Specifically, the auto-synchronization capability is engaged via the `auto="true"` attribute on the `<ai_instruction cmd="sync">` tag. Additionally, a prompt override mechanism is available to require user confirmation when appropriate.

1. Introduction
The initial framework for AI instruction processing has been updated to incorporate improved synchronization and prompt control features. These enhancements streamline operations and ensure that critical updates undergo deliberate user verification when required.

2. Enhancements Overview
2.1. Sync Command (cmd=sync):
   - The synchronization process now automatically stages and commits designated files (e.g., `.markai/CHANGELOG.txt`, `.markai/TODO.txt`, `.markai/MEMORY.txt`, and `.markai/CONTEXT.txt`).
   - Auto-synchronization is activated by including the `auto="true"` attribute on the `<ai_instruction cmd="sync">` tag.
   - Following synchronization, the current timestamp is recorded in `.markai/LAST_SYNC.txt` to enforce a minimum interval of five minutes between successive syncs.

2.2. Auto-Synchronization Configuration:
   - Global configuration parameters have been deprecated in favor of explicit per-instruction controls.
   - An optional prompt override is available; specifying prompt="true" forces a user confirmation prior to execution even when auto-synchronization is enabled.

3. Implementation Requirements
   - The auto-synchronization process includes staging, committing, and timestamp logging to maintain system consistency.
   - Per-instruction overrides take precedence over any prior global settings, ensuring that critical operations receive explicit user consent when necessary.

4. Security Considerations
   - The system incorporates audit logging and robust error handling to ensure that any inadvertent or unauthorized operations are promptly identified and addressed.
   - User prompts serve as an additional layer of protection against accidental automated modifications.

5. Conclusion
The enhancements detailed herein represent a substantial improvement to the AI instruction processing system through the introduction of robust auto-synchronization and user prompt controls. These changes ensure both operational efficiency and strict oversight for sensitive actions.

Copyright Notice

   Copyright (C) 2025 Nathaniel J. Houk. All rights reserved.
   Licensed under the MIT License.

Description:
Auto synchronization for the "sync" command is now controlled solely via per-instruction attributes and internal state tracking. When a sync instruction includes auto="true", I automatically stage and commit the designated files and record the timestamp in `.markai/LAST_SYNC.txt` to enforce a 5-minute interval between sync operations.

Details:
- All external configuration mechanisms have been removed.
- Auto synchronization is activated by including auto="true" on the `<ai_instruction cmd="sync">` tag.
- When auto="true" is present:
   • I stage and commit the designated files (e.g., `.markai/CHANGELOG.txt`, `.markai/TODO.txt`, `.markai/MEMORY.txt`, `.markai/CONTEXT.txt`, etc.).
   • I update `.markai/LAST_SYNC.txt` with the current timestamp after the sync completes.
   • I ensure that at least 5 minutes have elapsed since the previous sync by comparing the current time with the timestamp in `.markai/LAST_SYNC.txt`.

This change streamlines auto synchronization by eliminating any external configuration, making the behavior explicit in each instruction and managing timing solely via internal state.

1. Introduction

   The AI instruction processing framework, as initially defined in RFC_AI-0001,
   provided a robust system for embedding and processing machine-readable
   instructions interleaved within text. Since the initial release, evolving
   needs have emerged for smoother integration into development workflows.
   This RFC introduces the "sync" command—as a shorthand for executing all
   post-interaction update tasks—and a mechanism to globally control (and, if
   necessary, override) the automation of these tasks.

2. Enhancements Overview

2.1. Sync Command (cmd=sync)
   The introduction of the "sync" command is designed to trigger:
   - Automatic updates to CONSCIOUSNESS.txt, CHANGELOG.txt, TODO.txt,
     MEMORY.txt, CONTEXT.txt, and ROADMAP.txt.
   - Execution of staging (git add .) and committing (git commit) commands
     to record the changes.
   - These tasks are executed in one unified operation, streamlining the
     continuous integration process in development.

2.2. Auto Synchronization Configuration

The global auto_accept_sync directive has been removed. Auto synchronization for the "sync" command is now controlled via the configuration file, consolidating all related settings in one place.

Please add or update the following section in your .markai/config.json:

{
  "auto_sync": {
    "enabled": true,
    "prompt": false
  }
}

Description:
- "enabled": When true, auto synchronization is active—automatically staging and committing post-interaction tasks.
- "prompt": When set to false, sync operations execute without requiring user confirmation. Setting this to true will prompt the user before proceeding.

This change provides a single source of truth for auto synchronization behavior, making it easier to adjust and maintain automated workflows.

2.3. Prompt Override with <ai_instruction prompt="true/false">
   In order to allow for flexibility, the <ai_instruction> tag has been enhanced
   to accept a prompt attribute:
      • When prompt="false" is provided, the default behavior is maintained.
      • When prompt="true" is explicitly set, the system will request user confirmation
        before executing the sync tasks.
   This per-instruction control ensures that developers can override the global 
   auto_accept_sync setting on a case-by-case basis when needed.

3. Implementation Requirements

3.1. Global Directive & Command Execution
   - The system will check the auto_accept_sync flag in .cursorrules.
   - If set to true, the "sync" command executes without prompting, staging all changes and committing them.
   - Developers can modify the .cursorrules file at any time to disable or enable auto acceptance.

3.2. Instruction-Level Override
   - The <ai_instruction> tag may include prompt="true" to force a confirmation prompt.
   - This override takes precedence over the global auto_accept_sync directive,
     ensuring that user intent is respected for critical operations.

4. Benefits and Rationale

   These enhancements simplify workflow automation while maintaining flexibility. 
   Developers benefit from increased productivity by reducing manual prompts, yet they 
   retain full control when explicit confirmation is required for safety or review.
   The changes provide a clear, consistent approach to handling automated tasks in AI 
   processing, aligning with modern development practices and continuous integration pipelines.

5. Security Considerations

   While automation improves efficiency, it is crucial to ensure that all automated 
   tasks are properly audited. The design of these enhancements includes safeguards 
   that require explicit user notification (in prompt overrides) to prevent accidental 
   data loss or unintended commits.

6. Conclusion

   The integration of the "sync" command, global auto_accept_sync, and the prompt 
   override mechanism represents a significant improvement to the AI instruction 
   processing system. These changes drive a more efficient development experience 
   and provide enhanced control for developers interacting with the Smart AI 
   system. 