RFC: MARKAI-0004
Title: Unified Enhancements to the AI Instruction Processing System

Abstract:
This RFC consolidates and extends previous specifications (RFC 0001, RFC 0002, and RFC 0003) regarding AI instruction processing. The enhancements eliminate reliance on external configuration files by leveraging per-instruction attributes, introduce automatic timestamp updates for synchronization via the `.markai/LAST_SYNC.txt` file, and reaffirm protocols for attribute handling related to inclusion, security, and immutability. These modifications streamline configuration management, ensure proper synchronization intervals, and enhance overall system robustness and security.

1. Introduction
The foundational AI instruction processing system was originally defined in RFC 0001, which established core processing rules, immutability constraints, and the basic instruction tag format. Subsequent updates in RFC 0002 introduced automatic synchronization for the "sync" command, and RFC 0003 clarified attribute handling for inclusion, security, and locked content. In this revision, the external configuration file is eliminated. Instead, auto-synchronization is activated via the `auto="true"` attribute within the sync instruction, with corresponding timing logged in the `.markai/LAST_SYNC.txt` file.

2. Enhancements Overview
2.1. Auto Synchronization Enhancements:
   - Removal of External Configuration: The external configuration file (e.g., `.markai/config.json`) is deprecated.
   - Per-Instruction Control: The synchronization process is now governed by the `auto="true"` attribute on the `<ai_instruction cmd="sync">` tag.
   - Timestamp Logging: Upon successful synchronization, the current timestamp is recorded in `.markai/LAST_SYNC.txt` to ensure a minimum interval of five minutes between sync events.
   - Streamlined Workflow: This approach obviates the need for separate configuration settings, making auto-synchronization explicit for each instruction.

2.2. Attribute Handling and Immutability:
   - Inclusion Attribute: Consistent with earlier RFCs, the inclusion attribute allows for the integration of external rule files.
   - Security and Locked Attributes: In alignment with RFCs 0001 and 0003, instructions marked as locked (`locked="true"`) or with stringent security attributes must remain immutable.

3. Implementation Requirements
   - Processing Rules: Each `<ai_instruction>` tag is processed exactly once without support for nested instruction tags.
   - Sync Command Workflow: The system stages and commits designated files, updates file records as specified, and logs the synchronization timestamp.
   - Error Handling: Malformed tags are bypassed, and any improper attempts to modify locked content are recorded in `.markai/ERRORS.txt`.

4. Security Considerations
   - Immutability Enforcement: Any modifications to content marked as immutable trigger an error condition.
   - Security Attributes: High-security instructions (e.g., those with `security="ring0"`) are subject to enhanced protection protocols.
   - Audit Logging: All automated operations, including sync events and error occurrences, are logged to support auditing and facilitate rollbacks if necessary.

5. Conclusion
This RFC (MARKAI-0004) formalizes the enhancements made in AI instruction processing by eliminating external configuration, enforcing per-instruction synchronization, and maintaining robust security and immutability. These improvements collectively contribute to a simplified, secure, and efficient operational framework. 