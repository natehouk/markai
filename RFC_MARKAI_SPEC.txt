MARKAI Instruction Processing Comprehensive RFC
Version: 1.3.0
Last Updated: 2025-03-20

------------------------------------------------------------------
Overview:
------------------------------------------------------------------
This document consolidates and unifies all previous RFCs (RFC_MARKAI-0001 through RFC_MARKAI-0007) along with the updated guidelines for preempt command execution into a single comprehensive specification. It governs the parsing, execution, and security of embedded AI instructions throughout the repository.

------------------------------------------------------------------
1. Command Syntax and Formatting
------------------------------------------------------------------
- All command identifiers used within <ai_instruction> tags must begin with a forward slash ('/').
  Example:
    • Correct: <ai_instruction cmd="/sync" ...>
    • Incorrect: <ai_instruction cmd="sync" ...>

This rule is defined in RFC_MARKAI-0006 and applies to every instruction processed in the system.

------------------------------------------------------------------
2. Instruction Attributes and Directives
------------------------------------------------------------------
- Locked Content:
  • Instructions marked with the attribute locked="true" are immutable and must not be modified (see RFC_MARKAI-0001 and RFC_MARKAI-0003).

- Auto-Sync and Timing:
  • The auto-sync mechanism is triggered when the auto="true" attribute is present or when more than 5 minutes have elapsed since the last sync (tracked via .markai/LAST_SYNC.txt).

- Human-Readable Annotations:
  • Content within <!--ai-ignore ... ai-ignore--> blocks is excluded from automated processing and is for reference only.

------------------------------------------------------------------
3. Processing Workflow
------------------------------------------------------------------
- The system recursively scans repository files to extract <ai_instruction> commands.
- Each extracted command is validated to ensure adherence to required syntax rules, including the mandatory leading slash.
- Upon successful validation, the system updates key log and configuration files (e.g., CONSCIOUSNESS.txt, CHANGELOG.txt, TODO.txt, MEMORY.txt, CONTEXT.txt, ROADMAP.txt) as described in RFC_MARKAI-0002.
- Clarifications and test cases ensuring correct command handling originated from RFC_MARKAI-0004, while integration updates are discussed in RFC_MARKAI-0005.

------------------------------------------------------------------
4. Security and Compliance
------------------------------------------------------------------
- Immutability Requirements:
  • Commands using the locked attribute or elevated security settings (e.g., security="ring0") are strictly protected. Unauthorized modifications must be rejected.

- Legacy Command Transition:
  • Commands that do not follow the leading slash rule will trigger warnings during a defined deprecation phase.

------------------------------------------------------------------
5. Historical RFC References
------------------------------------------------------------------
- RFC_MARKAI-0001: Initial guidelines on instruction processing and immutability.
- RFC_MARKAI-0002: Introduction of the sync command and automation procedures.
- RFC_MARKAI-0003: Enhancements for attribute handling and security enforcement.
- RFC_MARKAI-0004: Clarifications and test cases for command processing.
- RFC_MARKAI-0005: Updates on integration and code review processes.
- RFC_MARKAI-0006: Enforcing the leading slash requirement for all AI instruction commands.
- RFC_MARKAI-0007: Enforcing the preempt attribute for command execution.

------------------------------------------------------------------
6. Enforcing Preempt Command Execution (RFC_MARKAI-0007)
------------------------------------------------------------------
Title: Enforcing the Preempt Attribute for Command Execution
Author: MarkAI Team
Date: 2025-02-25

1. Summary:
   This RFC replaces the legacy pre_command mechanism with the "preempt" attribute. Commands marked with preempt="true" will be executed before any others, ensuring that critical tasks (such as /consciousness) are prioritized.

2. Motivation:
   - The current system may fail to trigger critical commands due to ordering issues.
   - Introducing preempt="true" guarantees timely execution of high-priority commands.
   - The change simplifies command execution logic and enforces deterministic processing order.

3. Proposed Change:
   - Eliminate the legacy pre_command mechanism in favor of preempt="true".
   - Update all critical command definitions to include preempt="true".
   - Modify the command parser to process commands with preempt="true" prior to all other commands.

4. Impact and Risks:
   - Ensures vital tasks (e.g., self-awareness logging) are executed immediately.
   - May require updates to existing instructions.
   - Represents minimal risk as it only affects execution priority logic.

5. Implementation:
   - Update the MarkAI command handler to identify and prioritize commands with preempt="true".
   - Test extensively to ensure consistent ordering of command execution.
   - Document changes in the developer guidelines.

6. Conclusion:
   The introduction of the preempt attribute enhances the reliability and predictability of the MarkAI system by ensuring that critical tasks are always processed first.

------------------------------------------------------------------
7. Versioning and Maintenance
------------------------------------------------------------------
- The specification adheres to semantic versioning.
- Any update is accompanied by an increment in the version number.
- This document should be reviewed and revised periodically to align with ongoing developments and best practices.

------------------------------------------------------------------
8. Conclusion
------------------------------------------------------------------
Adherence to this comprehensive specification ensures robust, consistent, and secure processing of AI-powered commands within the MarkAI system. All development and automation tasks must comply with these guidelines to maintain system integrity and operational consistency.

------------------------------------------------------------------
End of Document 